
import React, { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { MessageSquare, X, Send, Phone, Languages, Home } from "lucide-react";

type Language = 'english' | 'hindi' | 'urdu';

// Translation dictionaries
const translations = {
  english: {
    chatTitle: "FindIt@United Assistant",
    chatSubtitle: "Always here to help! ЁЯЩП",
    placeholder: "Type your question...",
    welcome: "Welcome to FindIt@United! ЁЯЩП How can I help you with lost and found items today?",
    typing: "Typing...",
    quickQuestions: "Quick Questions:",
    contactInfo: "Contact Information",
    goBackToMenu: "тЖР Back to Main Menu",
    responses: {
      lost: "If you've lost an item, you can report it through our 'Report Lost Item' form on the homepage. Please provide as many details as possible including:\nтАв Item description and color\nтАв Location where you lost it\nтАв Date and time\nтАв Your contact information\n\nWe'll notify you immediately if someone reports finding a matching item! ЁЯдЮ",
      found: "Thank you for being honest! Please report the found item through our 'Report Found Item' form. Provide details about:\nтАв What you found\nтАв Where you found it\nтАв When you found it\nтАв Current location of the item\n\nYour honesty helps build a better community! ЁЯЩП",
      claim: "To claim an item:\n1. Find it in our listings\n2. Click the 'This is mine' button\n3. Provide verification details like:\n   тАв Purchase receipts\n   тАв Photos of the item\n   тАв Unique identifying features\n   тАв Serial numbers (if applicable)\n\nOur staff will review your claim before approval.",
      contact: "ЁЯУЮ Contact Information:\n\nЁЯПв Office: Student Center, Room 101\nЁЯУз Email: support@finditunited.edu\nтШОя╕П Phone: (936) 480-0990\nЁЯХТ Hours: Monday-Friday, 9am-5pm\n\nЁЯМР We provide support in Hindi, English, and Urdu!",
      kept: "Items are kept for up to 30 days. Unclaimed items may be donated, discarded, or handed to authorities based on their type. Please claim your belongings promptly.",
      help: "I can help you with:\nтАв Reporting lost items\nтАв Reporting found items\nтАв Claiming items\nтАв Contact information\nтАв Office hours and location\nтАв General lost and found policies\n\nWhat would you like to know? ЁЯШК",
      default: "I'm here to help with lost and found queries! You can ask about reporting items, claiming items, contact information, or office hours. What would you like to know? ЁЯШК"
    }
  },
  hindi: {
    chatTitle: "FindIt@United рд╕рд╣рд╛рдпрдХ",
    chatSubtitle: "рд╣рдореЗрд╢рд╛ рдЖрдкрдХреА рд╕реЗрд╡рд╛ рдореЗрдВ! ЁЯЩП",
    placeholder: "рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░реЗрдВ...",
    welcome: "FindIt@United рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯЩП рдЦреЛрдП рдФрд░ рдорд┐рд▓реЗ рд╕рд╛рдорд╛рди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
    typing: "рдЯрд╛рдЗрдк рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
    quickQuestions: "рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди:",
    contactInfo: "рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА",
    goBackToMenu: "тЖР рдореБрдЦреНрдп рдореЗрдиреНрдпреВ рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ",
    responses: {
      lost: "рдпрджрд┐ рдЖрдкрдХрд╛ рдХреЛрдИ рд╕рд╛рдорд╛рди рдЦреЛ рдЧрдпрд╛ рд╣реИ, рддреЛ рдЖрдк рд╣реЛрдордкреЗрдЬ рдкрд░ 'рдЦреЛрдпрд╛ рд╕рд╛рдорд╛рди рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ' рдлреЙрд░реНрдо рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЗрд╕рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╕реЗ рдЕрдзрд┐рдХ рд╡рд┐рд╡рд░рдг рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдЬреИрд╕реЗ:\nтАв рд╕рд╛рдорд╛рди рдХрд╛ рд╡рд┐рд╡рд░рдг рдФрд░ рд░рдВрдЧ\nтАв рд╡рд╣ рд╕реНрдерд╛рди рдЬрд╣рд╛рдБ рдЖрдкрдиреЗ рдЗрд╕реЗ рдЦреЛрдпрд╛\nтАв рджрд┐рдирд╛рдВрдХ рдФрд░ рд╕рдордп\nтАв рдЖрдкрдХреА рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА\n\nрдпрджрд┐ рдХреЛрдИ рдорд┐рд▓рддрд╛-рдЬреБрд▓рддрд╛ рд╕рд╛рдорд╛рди рдорд┐рд▓рдиреЗ рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ рддреЛ рд╣рдо рддреБрд░рдВрдд рдЖрдкрдХреЛ рд╕реВрдЪрд┐рдд рдХрд░реЗрдВрдЧреЗ! ЁЯдЮ",
      found: "рдЖрдкрдХреА рдИрдорд╛рдирджрд╛рд░реА рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж! рдХреГрдкрдпрд╛ 'рдорд┐рд▓рд╛ рд╕рд╛рдорд╛рди рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ' рдлреЙрд░реНрдо рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдорд┐рд▓реЗ рд╕рд╛рдорд╛рди рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВред рд╡рд┐рд╡рд░рдг рдкреНрд░рджрд╛рди рдХрд░реЗрдВ:\nтАв рдЖрдкрдХреЛ рдХреНрдпрд╛ рдорд┐рд▓рд╛\nтАв рдЖрдкрдХреЛ рдХрд╣рд╛рдБ рдорд┐рд▓рд╛\nтАв рдХрдм рдорд┐рд▓рд╛\nтАв рд╕рд╛рдорд╛рди рдХреА рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐\n\nрдЖрдкрдХреА рдИрдорд╛рдирджрд╛рд░реА рд╕реЗ рдПрдХ рдмреЗрд╣рддрд░ рд╕рдореБрджрд╛рдп рдмрдирддрд╛ рд╣реИ! ЁЯЩП",
      claim: "рд╕рд╛рдорд╛рди рдХрд╛ рджрд╛рд╡рд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:\n1. рдЗрд╕реЗ рд╣рдорд╛рд░реА рд╕реВрдЪреА рдореЗрдВ рдЦреЛрдЬреЗрдВ\n2. 'рдпрд╣ рдореЗрд░рд╛ рд╣реИ' рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ\n3. рд╕рддреНрдпрд╛рдкрди рд╡рд┐рд╡рд░рдг рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдЬреИрд╕реЗ:\n   тАв рдЦрд░реАрджрд╛рд░реА рдХреА рд░рд╕реАрджреЗрдВ\n   тАв рд╕рд╛рдорд╛рди рдХреА рдлреЛрдЯреЛ\n   тАв рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрд╣рдЪрд╛рди рдЪрд┐рд╣реНрди\n   тАв рд╕реАрд░рд┐рдпрд▓ рдирдВрдмрд░ (рдпрджрд┐ рд▓рд╛рдЧреВ рд╣реЛ)\n\nрд╣рдорд╛рд░реЗ рдХрд░реНрдордЪрд╛рд░реА рдЕрдиреБрдореЛрджрди рд╕реЗ рдкрд╣рд▓реЗ рдЖрдкрдХреЗ рджрд╛рд╡реЗ рдХреА рд╕рдореАрдХреНрд╖рд╛ рдХрд░реЗрдВрдЧреЗред",
      contact: "ЁЯУЮ рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА:\n\nЁЯПв рдХрд╛рд░реНрдпрд╛рд▓рдп: рдЫрд╛рддреНрд░ рдХреЗрдВрджреНрд░, рдХрдорд░рд╛ 101\nЁЯУз рдИрдореЗрд▓: support@finditunited.edu\nтШОя╕П рдлреЛрди: (936) 480-0990\nЁЯХТ рд╕рдордп: рд╕реЛрдорд╡рд╛рд░-рд╢реБрдХреНрд░рд╡рд╛рд░, рд╕реБрдмрд╣ 9-рд╢рд╛рдо 5\n\nЁЯМР рд╣рдо рд╣рд┐рдВрджреА, рдЕрдВрдЧреНрд░реЗрдЬреА рдФрд░ рдЙрд░реНрджреВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВ!",
      kept: "рд╕рд╛рдорд╛рди 30 рджрд┐рдиреЛрдВ рддрдХ рд░рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИред рдмрд┐рдирд╛ рджрд╛рд╡рд╛ рдХрд┐рдП рдЧрдП рд╕рд╛рдорд╛рди рдХреЛ рдЙрдирдХреЗ рдкреНрд░рдХрд╛рд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рджрд╛рди рдореЗрдВ рджрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ, рдлреЗрдВрдХрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ, рдпрд╛ рдЕрдзрд┐рдХрд╛рд░рд┐рдпреЛрдВ рдХреЛ рд╕реМрдВрдкрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕рд╛рдорд╛рди рдЬрд▓реНрджреА рд▓реЗ рдЬрд╛рдПрдВред",
      help: "рдореИрдВ рдЖрдкрдХреА рдЗрдирдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ:\nтАв рдЦреЛрдП рд╕рд╛рдорд╛рди рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдирд╛\nтАв рдорд┐рд▓реЗ рд╕рд╛рдорд╛рди рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдирд╛\nтАв рд╕рд╛рдорд╛рди рдХрд╛ рджрд╛рд╡рд╛ рдХрд░рдирд╛\nтАв рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА\nтАв рдХрд╛рд░реНрдпрд╛рд▓рдп рдХреЗ рдШрдВрдЯреЗ рдФрд░ рд╕реНрдерд╛рди\nтАв рд╕рд╛рдорд╛рдиреНрдп рдЦреЛрдпрд╛-рдкрд╛рдпрд╛ рдиреАрддрд┐рдпрд╛рдВ\n\nрдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? ЁЯШК",
      default: "рдореИрдВ рдЦреЛрдП рдФрд░ рдорд┐рд▓реЗ рд╕рд╛рдорд╛рди рдХреЗ рд╕рд╡рд╛рд▓реЛрдВ рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ! рдЖрдк рд╕рд╛рдорд╛рди рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ, рджрд╛рд╡рд╛ рдХрд░рдиреЗ, рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА рдпрд╛ рдХрд╛рд░реНрдпрд╛рд▓рдп рдХреЗ рдШрдВрдЯреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? ЁЯШК"
    }
  },
  urdu: {
    chatTitle: "FindIt@United ┘Е╪╣╪з┘И┘Ж",
    chatSubtitle: "█Б┘Е█М╪┤█Б ╪в┘╛ ┌й█М ╪о╪п┘Е╪к ┘Е█М┌║! ЁЯЩП",
    placeholder: "╪з┘╛┘Ж╪з ╪│┘И╪з┘Д ┘╣╪з╪ж┘╛ ┌й╪▒█М┌║...",
    welcome: "FindIt@United ┘Е█М┌║ ╪в┘╛ ┌й╪з ╪о┘И╪┤ ╪в┘Е╪п█М╪п! ЁЯЩП ┌й┌╛┘И╪ж█Т ╪з┘И╪▒ ┘Е┘Д█Т █Б┘И╪ж█Т ╪│╪з┘Е╪з┘Ж ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ╪в╪м ┘Е█М┌║ ╪в┘╛ ┌й█М ┌й█М╪│█Т ┘Е╪п╪п ┌й╪▒ ╪│┌й╪к╪з █Б┘И┌║╪Я",
    typing: "┘╣╪з╪ж┘╛ ┌й╪▒ ╪▒█Б█Т █Б█М┌║...",
    quickQuestions: "┘Б┘И╪▒█М ╪│┘И╪з┘Д╪з╪к:",
    contactInfo: "╪▒╪з╪и╪╖█Б ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к",
    goBackToMenu: "тЖР ┘Е█М┘Ж ┘Е█М┘Ж┘И ┘╛╪▒ ┘И╪з┘╛╪│ ╪м╪з╪ж█М┌║",
    responses: {
      lost: "╪з┌п╪▒ ╪в┘╛ ┌й╪з ┌й┘И╪ж█М ╪│╪з┘Е╪з┘Ж ┌й┌╛┘И ┌п█М╪з █Б█Т╪М ╪к┘И ╪в┘╛ █Б┘И┘Е ┘╛█М╪м ┘╛╪▒ '┌й┌╛┘И█М╪з █Б┘И╪з ╪│╪з┘Е╪з┘Ж ╪▒┘╛┘И╪▒┘╣ ┌й╪▒█М┌║' ┘Б╪з╪▒┘Е ┌й█Т ╪░╪▒█М╪╣█Т ╪з╪│ ┌й█М ╪▒┘╛┘И╪▒┘╣ ┌й╪▒ ╪│┌й╪к█Т █Б█М┌║█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ╪▓█М╪з╪п█Б ╪│█Т ╪▓█М╪з╪п█Б ╪к┘Б╪╡█М┘Д╪з╪к ┘Б╪▒╪з█Б┘Е ┌й╪▒█М┌║ ╪м█М╪│█Т:\nтАв ╪│╪з┘Е╪з┘Ж ┌й█М ╪к┘Б╪╡█М┘Д ╪з┘И╪▒ ╪▒┘Ж┌п\nтАв ┘И█Б ╪м┌п█Б ╪м█Б╪з┌║ ╪в┘╛ ┘Ж█Т ╪з╪│█Т ┌й┌╛┘И█М╪з\nтАв ╪к╪з╪▒█М╪о ╪з┘И╪▒ ┘И┘В╪к\nтАв ╪в┘╛ ┌й█М ╪▒╪з╪и╪╖█Б ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к\n\n╪з┌п╪▒ ┌й┘И╪ж█М ┘Е┘Д╪к╪з ╪м┘Д╪к╪з ╪│╪з┘Е╪з┘Ж ┘Е┘Д┘Ж█Т ┌й█М ╪▒┘╛┘И╪▒┘╣ ┌й╪▒╪к╪з █Б█Т ╪к┘И █Б┘Е ┘Б┘И╪▒█М ╪╖┘И╪▒ ┘╛╪▒ ╪в┘╛ ┌й┘И ╪з╪╖┘Д╪з╪╣ ╪п█М┌║ ┌п█Т! ЁЯдЮ",
      found: "╪в┘╛ ┌й█М ╪з█М┘Е╪з┘Ж╪п╪з╪▒█М ┌й█Т ┘Д█М█Т ╪┤┌й╪▒█М█Б! ╪и╪▒╪з█Б ┌й╪▒┘Е '┘Е┘Д╪з █Б┘И╪з ╪│╪з┘Е╪з┘Ж ╪▒┘╛┘И╪▒┘╣ ┌й╪▒█М┌║' ┘Б╪з╪▒┘Е ┌й█Т ╪░╪▒█М╪╣█Т ┘Е┘Д█Т █Б┘И╪ж█Т ╪│╪з┘Е╪з┘Ж ┌й█М ╪▒┘╛┘И╪▒┘╣ ┌й╪▒█М┌║█Ф ╪к┘Б╪╡█М┘Д╪з╪к ┘Б╪▒╪з█Б┘Е ┌й╪▒█М┌║:\nтАв ╪в┘╛ ┌й┘И ┌й█М╪з ┘Е┘Д╪з\nтАв ╪в┘╛ ┌й┘И ┌й█Б╪з┌║ ┘Е┘Д╪з\nтАв ┌й╪и ┘Е┘Д╪з\nтАв ╪│╪з┘Е╪з┘Ж ┌й█М ┘Е┘И╪м┘И╪п█Б ╪м┌п█Б\n\n╪в┘╛ ┌й█М ╪з█М┘Е╪з┘Ж╪п╪з╪▒█М ╪│█Т ╪з█М┌й ╪и█Б╪к╪▒ ┌й┘Е█М┘И┘Ж┘╣█М ╪и┘Ж╪к█М █Б█Т! ЁЯЩП",
      claim: "╪│╪з┘Е╪з┘Ж ┌й╪з ╪п╪╣┘И█М┘░ ┌й╪▒┘Ж█Т ┌й█Т ┘Д█М█Т:\n1. ╪з╪│█Т █Б┘Е╪з╪▒█М ┘Б█Б╪▒╪│╪к ┘Е█М┌║ ╪к┘Д╪з╪┤ ┌й╪▒█М┌║\n2. '█М█Б ┘Е█М╪▒╪з █Б█Т' ╪и┘╣┘Ж ┘╛╪▒ ┌й┘Д┌й ┌й╪▒█М┌║\n3. ╪к╪╡╪п█М┘В█М ╪к┘Б╪╡█М┘Д╪з╪к ┘Б╪▒╪з█Б┘Е ┌й╪▒█М┌║ ╪м█М╪│█Т:\n   тАв ╪о╪▒█М╪п╪з╪▒█М ┌й█М ╪▒╪│█М╪п█М┌║\n   тАв ╪│╪з┘Е╪з┘Ж ┌й█М ╪к╪╡╪з┘И█М╪▒\n   тАв ┘Е┘Ж┘Б╪▒╪п ╪┤┘Ж╪з╪о╪к█М ╪о╪╡┘И╪╡█М╪з╪к\n   тАв ╪│█М╪▒█М┘Д ┘Ж┘Е╪и╪▒╪▓ (╪з┌п╪▒ ┘Д╪з┌п┘И █Б┘И)\n\n█Б┘Е╪з╪▒█Т ╪╣┘Е┘Д█Б ┘Е┘Ж╪╕┘И╪▒█М ╪│█Т ┘╛█Б┘Д█Т ╪в┘╛ ┌й█Т ╪п╪╣┘И█Т ┌й╪з ╪м╪з╪ж╪▓█Б ┘Д█М┌║ ┌п█Т█Ф",
      contact: "ЁЯУЮ ╪▒╪з╪и╪╖█Б ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к:\n\nЁЯПв ╪п┘Б╪к╪▒: ╪з╪│┘╣┘И┌И┘Ж┘╣ ╪│┘Ж┘╣╪▒╪М ┌й┘Е╪▒█Б 101\nЁЯУз ╪з█М ┘Е█М┘Д: support@finditunited.edu\nтШОя╕П ┘Б┘И┘Ж: (936) 480-0990\nЁЯХТ ╪з┘И┘В╪з╪к: ┘╛█М╪▒ ╪│█Т ╪м┘Е╪╣█Б╪М ╪╡╪и╪н 9 ╪│█Т ╪┤╪з┘Е 5\n\nЁЯМР █Б┘Е ╪з╪▒╪п┘И╪М ╪з┘Ж┌п╪▒█М╪▓█М ╪з┘И╪▒ █Б┘Ж╪п█М ┘Е█М┌║ ┘Е╪п╪п ┘Б╪▒╪з█Б┘Е ┌й╪▒╪к█Т █Б█М┌║!",
      kept: "╪│╪з┘Е╪з┘Ж 30 ╪п┘Ж ╪к┌й ╪▒┌й┌╛╪з ╪м╪з╪к╪з █Б█Т█Ф ╪и╪║█М╪▒ ╪п╪╣┘И█М┘░ ┌й█Т ╪│╪з┘Е╪з┘Ж ┌й┘И ╪з┘Ж ┌й█М ┘В╪│┘Е ┌й█Т ┘Е╪╖╪з╪и┘В ╪╣╪╖█М█Б ┌й█М╪з ╪м╪з ╪│┌й╪к╪з █Б█Т╪М ┘╛┌╛█М┘Ж┌й╪з ╪м╪з ╪│┌й╪к╪з █Б█Т╪М █М╪з ╪н┌й╪з┘Е ┌й┘И ╪п█М╪з ╪м╪з ╪│┌й╪к╪з █Б█Т█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ╪з┘╛┘Ж╪з ╪│╪з┘Е╪з┘Ж ╪м┘Д╪п█М ┘Д█Т ╪м╪з╪ж█М┌║█Ф",
      help: "┘Е█М┌║ ╪в┘╛ ┌й█М ╪з┘Ж ┌Ж█М╪▓┘И┌║ ┘Е█М┌║ ┘Е╪п╪п ┌й╪▒ ╪│┌й╪к╪з █Б┘И┌║:\nтАв ┌й┌╛┘И╪ж█Т █Б┘И╪ж█Т ╪│╪з┘Е╪з┘Ж ┌й█М ╪▒┘╛┘И╪▒┘╣ ┌й╪▒┘Ж╪з\nтАв ┘Е┘Д█Т █Б┘И╪ж█Т ╪│╪з┘Е╪з┘Ж ┌й█М ╪▒┘╛┘И╪▒┘╣ ┌й╪▒┘Ж╪з\nтАв ╪│╪з┘Е╪з┘Ж ┌й╪з ╪п╪╣┘И█М┘░ ┌й╪▒┘Ж╪з\nтАв ╪▒╪з╪и╪╖█Б ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к\nтАв ╪п┘Б╪к╪▒█М ╪з┘И┘В╪з╪к ╪з┘И╪▒ ╪м┌п█Б\nтАв ╪╣┘Е┘И┘Е█М ┌й┌╛┘И█М╪з ┘╛╪з█М╪з ┘╛╪з┘Д█М╪│█М╪з┌║\n\n╪в┘╛ ┌й█М╪з ╪м╪з┘Ж┘Ж╪з ┌Ж╪з█Б╪к█Т █Б█М┌║╪Я ЁЯШК",
      default: "┘Е█М┌║ ┌й┌╛┘И╪ж█Т ╪з┘И╪▒ ┘Е┘Д█Т █Б┘И╪ж█Т ╪│╪з┘Е╪з┘Ж ┌й█Т ╪│┘И╪з┘Д╪з╪к ┘Е█М┌║ ╪в┘╛ ┌й█М ┘Е╪п╪п ┌й█Т ┘Д█М█Т █М█Б╪з┌║ █Б┘И┌║! ╪в┘╛ ╪│╪з┘Е╪з┘Ж ╪▒┘╛┘И╪▒┘╣ ┌й╪▒┘Ж█Т╪М ╪п╪╣┘И█М┘░ ┌й╪▒┘Ж█Т╪М ╪▒╪з╪и╪╖█Б ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к █М╪з ╪п┘Б╪к╪▒█М ╪з┘И┘В╪з╪к ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┘╛┘И┌Ж┌╛ ╪│┌й╪к█Т █Б█М┌║█Ф ╪в┘╛ ┌й█М╪з ╪м╪з┘Ж┘Ж╪з ┌Ж╪з█Б╪к█Т █Б█М┌║╪Я ЁЯШК"
    }
  }
};

// Enhanced FAQ data with multi-language support
const getQuickSuggestions = (language: Language) => {
  switch (language) {
    case 'hindi':
      return [
        "рдЦреЛрдпрд╛ рд╕рд╛рдорд╛рди рдХреИрд╕реЗ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ?",
        "рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП",
        "рд╕рд╛рдорд╛рди рдХрд┐рддрдиреЗ рджрд┐рди рд░рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИ?",
        "рджрд╛рд╡рд╛ рдХреИрд╕реЗ рдХрд░реЗрдВ?"
      ];
    case 'urdu':
      return [
        "┌й┌╛┘И█М╪з █Б┘И╪з ╪│╪з┘Е╪з┘Ж ┌й█М╪│█Т ╪▒┘╛┘И╪▒┘╣ ┌й╪▒█М┌║╪Я",
        "╪▒╪з╪и╪╖█Б ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к ┌Ж╪з█Б█М█Т",
        "╪│╪з┘Е╪з┘Ж ┌й╪к┘Ж█Т ╪п┘Ж ╪▒┌й┌╛╪з ╪м╪з╪к╪з █Б█Т╪Я",
        "╪п╪╣┘И█М┘░ ┌й█М╪│█Т ┌й╪▒█М┌║╪Я"
      ];
    default:
      return [
        "How to report a lost item?",
        "Need contact information",
        "How long are items kept?",
        "How to claim an item?"
      ];
  }
};

// Theme configurations for different languages
const getLanguageTheme = (language: Language) => {
  switch (language) {
    case 'hindi':
      return {
        primary: "from-blue-500 via-indigo-500 to-purple-500",
        secondary: "from-blue-500 to-indigo-500",
        background: "from-blue-50 via-white to-indigo-50",
        darkBackground: "from-slate-800 via-blue-900/20 to-indigo-900/20",
        button: "from-blue-500 to-indigo-500",
        buttonHover: "from-blue-600 to-indigo-600",
        accent: "from-blue-100 to-indigo-100",
        darkAccent: "from-blue-800 to-indigo-800"
      };
    case 'urdu':
      return {
        primary: "from-green-500 via-emerald-500 to-teal-500",
        secondary: "from-green-500 to-emerald-500",
        background: "from-green-50 via-white to-emerald-50",
        darkBackground: "from-slate-800 via-green-900/20 to-emerald-900/20",
        button: "from-green-500 to-emerald-500",
        buttonHover: "from-green-600 to-emerald-600",
        accent: "from-green-100 to-emerald-100",
        darkAccent: "from-green-800 to-emerald-800"
      };
    default: // English
      return {
        primary: "from-orange-500 via-white via-green-500 to-blue-500",
        secondary: "from-orange-500 to-red-500",
        background: "from-orange-50 via-white to-red-50",
        darkBackground: "from-slate-800 via-slate-700 to-slate-800",
        button: "from-orange-500 to-red-500",
        buttonHover: "from-orange-600 to-red-600",
        accent: "from-orange-100 to-red-100",
        darkAccent: "from-orange-800 to-red-800"
      };
  }
};

type Message = {
  isUser: boolean;
  text: string;
  isContact?: boolean;
};

export const Chatbot = () => {
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [language, setLanguage] = useState<Language>('english');
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messageEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const currentTranslations = translations[language];
  const theme = getLanguageTheme(language);

  // Initialize welcome message when language changes
  useEffect(() => {
    setMessages([{ 
      isUser: false, 
      text: currentTranslations.welcome
    }]);
  }, [language]);

  useEffect(() => {
    if (messageEndRef.current) {
      messageEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  useEffect(() => {
    if (isChatOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isChatOpen]);

  const toggleChat = () => {
    setIsChatOpen(!isChatOpen);
  };

  const handleLanguageChange = (newLanguage: Language) => {
    setLanguage(newLanguage);
  };

  const goBackToMainMenu = () => {
    setMessages([{ 
      isUser: false, 
      text: currentTranslations.welcome
    }]);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
  };

  const sendMessage = () => {
    if (inputValue.trim() === "") return;

    const userMessage = { isUser: true, text: inputValue.trim() };
    setMessages([...messages, userMessage]);
    setInputValue("");
    setIsTyping(true);

    setTimeout(() => {
      const response = getBotResponse(inputValue.trim());
      setMessages(prev => [...prev, { isUser: false, text: response }]);
      setIsTyping(false);
    }, 1200);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      sendMessage();
    }
  };

  const getBotResponse = (question: string): string => {
    const lowercaseQuestion = question.toLowerCase();
    const responses = currentTranslations.responses;
    
    // Enhanced keyword matching with better responses
    if (lowercaseQuestion.includes("lost") || lowercaseQuestion.includes("рдЦреЛ") || lowercaseQuestion.includes("┌й┌╛┘И")) {
      return responses.lost;
    } else if (lowercaseQuestion.includes("found") || lowercaseQuestion.includes("рдорд┐рд▓рд╛") || lowercaseQuestion.includes("┘Е┘Д╪з")) {
      return responses.found;
    } else if (lowercaseQuestion.includes("claim") || lowercaseQuestion.includes("рджрд╛рд╡рд╛") || lowercaseQuestion.includes("╪п╪╣┘И█М┘░")) {
      return responses.claim;
    } else if (lowercaseQuestion.includes("contact") || lowercaseQuestion.includes("рд╕рдВрдкрд░реНрдХ") || lowercaseQuestion.includes("╪▒╪з╪и╪╖█Б")) {
      return responses.contact;
    } else if (lowercaseQuestion.includes("kept") || lowercaseQuestion.includes("long") || lowercaseQuestion.includes("рджрд┐рди") || lowercaseQuestion.includes("╪▒┌й┌╛╪з")) {
      return responses.kept;
    } else if (lowercaseQuestion.includes("help") || lowercaseQuestion.includes("рд╕рд╣рд╛рдпрддрд╛") || lowercaseQuestion.includes("┘Е╪п╪п")) {
      return responses.help;
    }

    return responses.default;
  };

  const handleSuggestionClick = (question: string) => {
    const userMessage = { isUser: true, text: question };
    setMessages([...messages, userMessage]);
    setIsTyping(true);

    setTimeout(() => {
      const response = getBotResponse(question);
      setMessages(prev => [...prev, { isUser: false, text: response }]);
      setIsTyping(false);
    }, 1200);
  };

  const showContactInfo = () => {
    const contactMessage = {
      isUser: false,
      text: currentTranslations.responses.contact,
      isContact: true
    };
    setMessages(prev => [...prev, contactMessage]);
  };

  const suggestions = getQuickSuggestions(language);

  return (
    <>
      {/* Chat toggle button */}
      <button
        className={`fixed bottom-6 right-6 z-50 w-16 h-16 bg-gradient-to-r ${theme.secondary} hover:${theme.buttonHover} text-white rounded-full shadow-2xl flex items-center justify-center focus:outline-none focus:ring-4 focus:ring-orange-300 dark:focus:ring-orange-800 transition-all transform hover:scale-110 animate-pulse border-4 border-white dark:border-slate-800`}
        onClick={toggleChat}
        aria-label="Chat with FindIt Assistant"
      >
        {isChatOpen ? <X size={28} /> : <MessageSquare size={28} />}
        <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
      </button>

      {/* Chat window */}
      {isChatOpen && (
        <div className={`fixed bottom-24 right-6 z-50 w-80 sm:w-96 h-[500px] bg-gradient-to-b ${theme.background} dark:${theme.darkBackground} rounded-2xl shadow-2xl flex flex-col animate-fade-in border-4 border-gradient-to-r from-orange-300 via-red-300 to-pink-300 dark:border-slate-600 overflow-hidden`}>
          {/* Chat header with language selection */}
          <div className={`bg-gradient-to-r ${theme.primary} text-slate-800 p-4 rounded-t-2xl flex justify-between items-center border-b-4 border-gold shadow-lg`}>
            <div className="flex items-center">
              <div className={`w-10 h-10 bg-gradient-to-r ${theme.button} rounded-full flex items-center justify-center mr-3 shadow-lg`}>
                <MessageSquare size={20} className="text-white" />
              </div>
              <div>
                <h3 className="font-bold text-slate-800">{currentTranslations.chatTitle}</h3>
                <p className="text-xs text-slate-600">{currentTranslations.chatSubtitle}</p>
              </div>
            </div>
            <Button variant="ghost" size="icon" className="h-8 w-8 text-slate-700 hover:bg-white/50 rounded-full" onClick={toggleChat}>
              <X size={18} />
            </Button>
          </div>

          {/* Language selection buttons */}
          <div className="flex justify-center gap-2 p-3 bg-white/80 dark:bg-slate-700/80 border-b">
            {(['english', 'hindi', 'urdu'] as Language[]).map((lang) => (
              <button
                key={lang}
                onClick={() => handleLanguageChange(lang)}
                className={`px-3 py-1 rounded-full text-xs font-medium transition-all flex items-center gap-1 ${
                  language === lang 
                    ? `bg-gradient-to-r ${theme.button} text-white shadow-md` 
                    : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-500'
                }`}
              >
                <Languages size={12} />
                {lang === 'english' ? 'EN' : lang === 'hindi' ? 'рд╣рд┐рдВ' : '╪з╪▒╪п┘И'}
              </button>
            ))}
          </div>

          {/* Chat messages */}
          <div className={`flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b ${theme.background} dark:${theme.darkBackground}`}>
            {messages.map((message, index) => (
              <div
                key={index}
                className={`${
                  message.isUser 
                    ? `ml-auto bg-gradient-to-r ${theme.secondary} text-white shadow-lg` 
                    : message.isContact
                    ? "mr-auto bg-gradient-to-r from-blue-100 to-indigo-100 dark:from-blue-800 dark:to-indigo-800 text-slate-800 dark:text-white border-2 border-blue-300 dark:border-blue-600"
                    : "mr-auto bg-gradient-to-r from-white to-gray-50 dark:from-slate-600 dark:to-slate-500 text-slate-800 dark:text-white border border-gray-200 dark:border-slate-400"
                } max-w-[85%] rounded-2xl p-4 shadow-md ${message.isContact ? 'font-mono text-sm' : ''}`}
              >
                {message.isContact ? (
                  <div className="whitespace-pre-line">
                    {message.text}
                  </div>
                ) : (
                  message.text
                )}
              </div>
            ))}
            
            {isTyping && (
              <div className="mr-auto bg-white dark:bg-slate-600 text-slate-800 dark:text-white max-w-[80%] rounded-2xl p-4 border border-gray-200 dark:border-slate-400 shadow-md">
                <div className="flex space-x-2 items-center">
                  <div className={`w-3 h-3 bg-gradient-to-r ${theme.button} rounded-full animate-bounce`}></div>
                  <div className={`w-3 h-3 bg-gradient-to-r ${theme.button} rounded-full animate-bounce`} style={{ animationDelay: "0.2s" }}></div>
                  <div className={`w-3 h-3 bg-gradient-to-r ${theme.button} rounded-full animate-bounce`} style={{ animationDelay: "0.4s" }}></div>
                  <span className="text-sm text-slate-600 dark:text-slate-300 ml-2">{currentTranslations.typing}</span>
                </div>
              </div>
            )}

            {/* Quick suggestions and go back button */}
            {messages.length === 1 && !isTyping && (
              <div className="space-y-3">
                <p className="text-sm text-slate-600 dark:text-slate-400 text-center font-medium">{currentTranslations.quickQuestions}</p>
                <div className="flex flex-wrap gap-2">
                  {suggestions.map((suggestion, index) => (
                    <button
                      key={index}
                      className={`bg-white dark:bg-slate-700 hover:bg-blue-50 dark:hover:bg-slate-600 text-slate-800 dark:text-slate-200 text-sm px-4 py-2 rounded-full transition-all transform hover:scale-105 border border-gray-300 dark:border-slate-500 shadow-sm hover:shadow-md`}
                      onClick={() => handleSuggestionClick(suggestion)}
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
                
                {/* Contact info button */}
                <div className="text-center pt-2">
                  <button
                    onClick={showContactInfo}
                    className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-6 py-2 rounded-full text-sm font-medium transition-all transform hover:scale-105 shadow-lg flex items-center mx-auto gap-2"
                  >
                    <Phone size={16} />
                    {currentTranslations.contactInfo}
                  </button>
                </div>
              </div>
            )}

            {/* Go back to main menu button - shows when there are more than 1 message */}
            {messages.length > 1 && !isTyping && (
              <div className="text-center pt-2">
                <button
                  onClick={goBackToMainMenu}
                  className={`bg-gradient-to-r ${theme.button} hover:${theme.buttonHover} text-white px-6 py-2 rounded-full text-sm font-medium transition-all transform hover:scale-105 shadow-lg flex items-center mx-auto gap-2`}
                >
                  <Home size={16} />
                  {currentTranslations.goBackToMenu}
                </button>
              </div>
            )}
            
            <div ref={messageEndRef} />
          </div>

          {/* Chat input */}
          <div className={`border-t-4 border-gradient-to-r from-orange-300 to-red-300 dark:from-orange-600 dark:to-red-600 p-3 flex items-center gap-2 bg-gradient-to-r ${theme.background} dark:${theme.darkBackground}`}>
            <Input
              ref={inputRef}
              type="text"
              placeholder={currentTranslations.placeholder}
              value={inputValue}
              onChange={handleInputChange}
              onKeyDown={handleKeyDown}
              className="flex-1 border-2 border-orange-300 dark:border-orange-600 focus:border-red-400 dark:focus:border-red-500 rounded-full px-4 bg-white dark:bg-slate-700"
            />
            <Button 
              onClick={sendMessage} 
              size="icon"
              className={`bg-gradient-to-r ${theme.button} hover:${theme.buttonHover} rounded-full w-10 h-10 shadow-lg transform transition-all hover:scale-110`}
              disabled={inputValue.trim() === "" || isTyping}
            >
              <Send size={18} />
            </Button>
          </div>
        </div>
      )}
    </>
  );
};
